// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // 可根据需要改为 "postgresql" 或 "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  EDITOR
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系定义
  articles Article[]
  comments Comment[]
  Creator  Creator[]
}

model Article {
  id        Int      @id @default(autoincrement())
  path      String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系定义
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  comments Comment[]
  tags     Tag[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系定义
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 多对多关系
  articles Article[]
}

model File {
  id        Int      @id @default(autoincrement())
  path      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hash      String   @unique
}

model Setting {
  id           Int      @id @default(autoincrement())
  googleKey    String
  updatedAt    DateTime @updatedAt
  smtpEmail    String   @unique
  smtpPassword String   @unique
  smtpPost     Int      @unique
  smtpServer   String   @unique
}

model Creator {
  id     Int     @id @default(autoincrement())
  User   User    @relation(fields: [userId], references: [id])
  avatar String?
  name   String
  bio    String?
  tags   String?
  userId Int
}
